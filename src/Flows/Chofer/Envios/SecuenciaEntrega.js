const FlowManager = require('../../../FlowControl/FlowManager');
const AnalizarEstado = require('../../../Utiles/Funciones/Chofer/AnalizarEstado');

module.exports = async function FinalizarEntrega(userId, message, sock) {
    try {

        const data = await AnalizarEstado(message)

        await FlowManager.getFlow(userId);
        const hojaRuta = FlowManager.userFlows[userId]?.flowData;

        if (!hojaRuta || !hojaRuta.Hoja_Ruta || hojaRuta.Hoja_Ruta.length === 0) {
            console.error("‚ùå Hoja de ruta vac√≠a o no encontrada.");
            return;
        }

        const hoja = hojaRuta.Hoja_Ruta[0];
        const { Detalle_Actual = [] } = hoja;

        if (Detalle_Actual.length === 0) {
            await sock.sendMessage(userId, {
                text: "‚ö†Ô∏è No hay entrega en curso. Por favor, seleccion√° una entrega primero."
            });
            return;
        }
        const detalle = Detalle_Actual[0];

        let nuevoEstado;
        let nextStep;

console.log("data.data.Eleccion", data.data.Eleccion)

        switch (data.data.Eleccion) {
            case "1":
                nuevoEstado = "Entregado OK";
                nextStep = "EntregaOK";
                await sock.sendMessage(userId, {
                    text: `‚úÖ Se seleccion√≥ *${nuevoEstado}*.\nüì∏ Por favor, sub√≠ la *foto del remito* para finalizar.`
                });
                break;
            case "2":
                nuevoEstado = "Entregado NOK";
                nextStep = "Aclaracion";
                await sock.sendMessage(userId, {
                    text: `‚ö†Ô∏è Se seleccion√≥ *${nuevoEstado}*.\nüìù Por favor, contanos *qu√© pas√≥* con esta entrega.`
                });
                break;
            case "3":
                nuevoEstado = "Rechazado";
                nextStep = "Aclaracion";
                await sock.sendMessage(userId, {
                    text: `üö´ Se seleccion√≥ *${nuevoEstado}*.\nüìù Por favor, indic√° *el motivo* por el cual no se entreg√≥.`
                });
                break;
            case "4":
                nuevoEstado = "Reprogramado";
                nextStep = "Reprogramado";
                await sock.sendMessage(userId, {
                    text: `üîÅ Se seleccion√≥ *${nuevoEstado}*.\nüì® De acuerdo, *enviando avisos al vendedor y cliente*, ¬øpor que se reprogramo?.`
                });
                break;
            default:
                await sock.sendMessage(userId, {
                    text: '‚ùó *Opci√≥n no v√°lida.* Escrib√≠ 1, 2, 3 o 4 para indicar el resultado de la entrega.\n\n1Ô∏è‚É£ Entregado OK ‚úÖ\n2Ô∏è‚É£ Entregado NOK ‚ö†Ô∏è\n3Ô∏è‚É£ Rechazado ‚ùå\n4Ô∏è‚É£ Cancelado üö´'
                });
                return;
        }

        // Solo actualiza el estado
        detalle.Estado = nuevoEstado;

        // Redireccionar al siguiente paso del flujo
        FlowManager.setFlow(userId, "ENTREGACHOFER", nextStep, hojaRuta);

        console.log(`‚úÖ Estado actualizado a "${nuevoEstado}" y redireccionado al paso ${nextStep}`);

    } catch (error) {
        console.error("‚ùå Error en FinalizarEntrega:", error);
        await sock.sendMessage(userId, {
            text: "üí• *Ocurri√≥ un error al finalizar la entrega.*\nPor favor, intent√° nuevamente o contact√° a soporte."
        });
    }
};

