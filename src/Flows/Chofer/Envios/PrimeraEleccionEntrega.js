const FlowManager = require('../../../FlowControl/FlowManager');
const { actualizarHoraSalidaCabecera } = require('../../../services/google/Sheets/hojaDeruta');
const { IndicarActual } = require('../../../services/google/Sheets/hojaDeruta');
module.exports = async function PrimeraEleccionEntrega(userId, message, sock) {
    try {
        await FlowManager.getFlow(userId);
        const hojaRuta = FlowManager.userFlows[userId]?.flowData;

        if (!hojaRuta || !hojaRuta.Hoja_Ruta || hojaRuta.Hoja_Ruta.length === 0) {
            console.error("‚ùå Error: Hoja de ruta no proporcionada o vac√≠a.");
            return;
        }

        const hoja = hojaRuta.Hoja_Ruta[0];
        const { Detalles = [] } = hoja;
        const { Chofer } = hojaRuta;

        // Filtrar entregas pendientes
        const entregasPendientes = [...Detalles];

        // Extraer n√∫mero del mensaje
        const numeroPedido = parseInt(message.match(/\d+/)?.[0], 10);
        if (isNaN(numeroPedido) || numeroPedido < 1 || numeroPedido > entregasPendientes.length) {
            await sock.sendMessage(userId, { text: "‚ö†Ô∏è N√∫mero no v√°lido. Por favor, ingres√° un n√∫mero v√°lido de la lista." });
            return;
        }

        // Seleccionar detalle
        const detalleSeleccionado = entregasPendientes[numeroPedido - 1];

        // Sacarlo de Detalles
        hoja.Detalles = hoja.Detalles.filter(det => det.ID_DET !== detalleSeleccionado.ID_DET);

        // Ponerlo en Detalle_Actual
        hoja.Detalle_Actual = [detalleSeleccionado];

        if (
            hoja.Detalle_Actual.length === 1 && // reci√©n se asign√≥
            (!hoja.Detalles_Completados || hoja.Detalles_Completados.length === 0)
        ) {
            await actualizarHoraSalidaCabecera(hojaRuta);
        }

        // Construir texto del comprobante
        const comprobante = detalleSeleccionado.Comprobante;
        const comprobanteTexto = comprobante && comprobante.Letra && comprobante.Punto_Venta && comprobante.Numero
            ? `${comprobante.Letra} ${comprobante.Punto_Venta}-${comprobante.Numero}`
            : "--";

        // Mostrar informaci√≥n de entrega actual
        const mensaje = `üìå *En proceso* 

üÜî *ID Detalle:* ${detalleSeleccionado.ID_DET}
üè¢ *Cliente:* ${detalleSeleccionado.Cliente}
üìç *Direcci√≥n:* ${detalleSeleccionado.Direccion_Entrega}
üåÜ *Localidad:* ${detalleSeleccionado.Localidad}
üìÑ *Comprobante:* ${comprobanteTexto}`;

        await sock.sendMessage(userId, { text: mensaje });

        await sock.sendMessage(userId, {
            text: 'Cuando la entrega finalice, ind√≠calo enviando un mensaje con el resultado de la entrega:\n1Ô∏è‚É£ Entregado OK ‚úÖ\n2Ô∏è‚É£ Entregado NOK ‚ö†Ô∏è\n3Ô∏è‚É£ Rechazado ‚ùå\n4Ô∏è‚É£ Cancelado üö´'
        });

        await IndicarActual(hoja.ID_CAB,detalleSeleccionado.ID_DET);

        FlowManager.setFlow(userId, "ENTREGACHOFER", "SecuenciaEntrega", hojaRuta);

        console.log("‚úÖ Detalle movido a Detalle_Actual.");

    } catch (error) {
        console.error("‚ùå Error en PrimeraEleccionEntrega:", error);
    }
};
